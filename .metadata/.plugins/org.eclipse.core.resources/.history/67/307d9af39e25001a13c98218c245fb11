package com.logiqube.basketqube.dataimport.players;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.logiqube.basketqube.dataimport.service.PlayerService;
import com.logiqube.basketqube.dto.model.PlayerDto;

@Component
public class LoadPlayers {

	private String EL_BASE_URL = "https://www.euroleague.net";

	@Autowired
	PlayerService playerService;

	public void hello() {
		System.out.println("Hello load players");
	}

	public void load() throws IOException {
		Document doc = Jsoup.connect("https://www.euroleague.net/competition/players?letter=A").get();

		// select div with info
		Elements playerLinks = doc.select("div.person-list.player-list > div.items-list > div.item > a:nth-child(1)");

		playerLinks.forEach(link -> {
			String text = link.html();
			try {
				loadPlayerFromUrl(EL_BASE_URL + link.attr("href"), text.substring(text.indexOf(',') + 1).trim(),
						text.substring(0, text.indexOf(',')).trim());
			} catch (IOException e) {
				// TODO handle exception
			}
			
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				// TODO handle exception
			}
		});

	}

	private void loadPlayerFromUrl(String url, String firstName, String lastName) throws IOException {
		Document doc = Jsoup.connect(url).get();
		Element playerData = doc.selectFirst("div.player-data");

		PlayerDto player = new PlayerDto(firstName, lastName, extractDateOfBirth(playerData),
				extractNationality(playerData), extractHeight(playerData), extractPosition(playerData));

		playerService.savePlayer(player);
		System.out.println("Player " + firstName + " " + lastName + " saved!");

	}

	private LocalDate extractDateOfBirth(Element playerData) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM, uuuu");

		String dateOfBirth = playerData.selectFirst("div.summary-second > span:nth-child(2)").html();
		dateOfBirth = dateOfBirth.substring(dateOfBirth.indexOf(':') + 1).trim();

		return LocalDate.parse(dateOfBirth, formatter);
	}

	private double extractHeight(Element playerData) {
		String height = playerData.selectFirst("div.summary-second > span:nth-child(1)").html();
		return Double.valueOf(height.substring(height.indexOf(':') + 1).trim());
	}

	private String extractNationality(Element playerData) {
		String nationality = playerData.selectFirst("div.summary-second > span:nth-child(3)").html();
		return nationality.substring(nationality.indexOf(':') + 1).trim();
	}

	private String extractPosition(Element playerData) {
		return playerData.selectFirst("div.summary-first > span:nth-child(2) > span:nth-child(2)").html();
	}

}
